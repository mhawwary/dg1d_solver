[Case]
 title = sine_wave_test   # sine wave / Gaussian / .....
 title_mode = 0 # 0: default for testing, 1: use above strict title
 num_elements = 80
 x_begin =  0.0   
 x_end   =  80.0
 uniform_grid = 1        # all have the same dx
 refinement_level = 0    # if mesh refinement is introduced
 N_uniform_pts_per_elem = 10   # no. of unifromly spaced pts per element for post-processing
 N_exact_plot_pts = 512    # no. of points for exact solution plotting

[Simulation] 
 unsteady_data_print_flag = 2   # 0: use iter , 1: use time , 2: print each time step exactly
 unsteady_data_print_iter  = 4  # iter no. for print of unsteady data 
 unsteady_data_print_time  = 0.40 # time point for print of unsteady data
 restart_flag = 0   # 0: no-restart, 1: restart from restart file
 restart_iter = 1e6
 mode = test   # normal/test/error_analysis_dt/error_analysis_CFL/CFL_const/dt_const
 case_no = 00  # case number if needed for burgers decaying turb and any turbluent flow

[wave]
 wave_form = 0 ;      # 0: sine wave, 1: Gaussian wave, 2: InViscid Burgers 3: Decaying Turbulence   
 wave_speed = 1.0;    # for linear advection or linear Advec_Diffus
   
 [./trigonometric]    # u(x,0) = A * sin ( (f * PI * x) / L + phy ) + C
     wave_freq = 60.0      # wave_frequnecy f
     wave_amplitude = 1.0  # wave amplitude A
     wave_const = 0.0       # C
     wave_freq_shift = 0.0   # phy
     
 [../Gaussian]
   Gaussian_exponent = 38.6  # u(x) = A * exp(-38.6 *x^2)
   Gaussian_amplitude = 1.0 
     
 [../Burger_turb]
   turb_prob_type = Decay_turb_omerSan   # Decay_turb_Adams, Decay_turb_Yanan, forced_turb_Sherwin
   max_wave_no = 2048 
   ko = 10
   spectrum_restart_flag = 0  # 0: compute new spectrum, 1: load spectrum     
   velocity_mean = 0.0  #  u(x) = sum(E(k) *cos(k))+ u_mean

[space_solver]
 eqn_set = Advection  # Advection / Diffusion / Advection_Diffusion
 eqn_type = linear_advec # linear_advec / inv_burger / linear_diffus / visc_burger / linear_advec_diffus
 polynomial_order = 3

 [./advec_eqn]
  upwind_param = 1.00  # 1: fully upwind, 0: fully central, (0,1) hybrid
 
 [../heat_eqn]
  penalty_param = 1.00
  thermal_diffusivity = 2.0e-4
  diffus_scheme_type = BR2 # SIP/BR2
    
[time_solver]
 calculate_dt_flag = 1  # 0: specify dt and calc CFL, 1: specify CFL and calc dt
 calc_dt_adv_diffus_flag = 0 # 0: based on advection, 1: based on diffusion, 2: based on combined advection-diffusion
 CFL_no = 0.10
 dt = 1.0e-3
 initial_time = 0.0
 final_time = 1.0
 no_of_periods = 1.0  #  period = (xf-x0) / wave_speed
 maximum_iteration = 41 ;

 end_of_simulation_flag = 0
# 0: use no. of periods to setup the maxIter, 
# 1: use final time directly, 
# 2: use max_iteration as a stopping criteria if not converged or diverged 

 [./explicit]
  RK_order = 3
